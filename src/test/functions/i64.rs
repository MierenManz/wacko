use crate::*;
#[test]
fn i64_test() {
    let mut module = Module::new(true);
    let mut fn_body = FnBody::new(vec![], vec![ValType::I64]);

    let instructions = vec![
        Instruction::I64Const(1),
        Instruction::I64Eqz,
        Instruction::Drop,
        Instruction::I64Const(1),
        Instruction::I64Const(1),
        Instruction::I64Eq,
        Instruction::Drop,
        Instruction::I64Const(1),
        Instruction::I64Const(1),
        Instruction::I64Ne,
        Instruction::Drop,
        Instruction::I64Const(1),
        Instruction::I64Const(1),
        Instruction::I64ltS,
        Instruction::Drop,
        Instruction::I64Const(1),
        Instruction::I64Const(1),
        Instruction::I64ltU,
        Instruction::Drop,
        Instruction::I64Const(1),
        Instruction::I64Const(1),
        Instruction::I64GtS,
        Instruction::Drop,
        Instruction::I64Const(1),
        Instruction::I64Const(1),
        Instruction::I64GtU,
        Instruction::Drop,
        Instruction::I64Const(1),
        Instruction::I64Const(1),
        Instruction::I64leS,
        Instruction::Drop,
        Instruction::I64Const(1),
        Instruction::I64Const(1),
        Instruction::I64leU,
        Instruction::Drop,
        Instruction::I64Const(1),
        Instruction::I64Const(1),
        Instruction::I64GeS,
        Instruction::Drop,
        Instruction::I64Const(1),
        Instruction::I64Const(1),
        Instruction::I64GeU,
        Instruction::Drop,
        Instruction::I64Const(1),
        Instruction::I64Clz,
        Instruction::I64Ctz,
        Instruction::I64PopCnt,
        Instruction::I64Const(1),
        Instruction::I64Add,
        Instruction::I64Const(1),
        Instruction::I64Sub,
        Instruction::I64Const(1),
        Instruction::I64Mul,
        Instruction::I64Const(1),
        Instruction::I64DivS,
        Instruction::I64Const(1),
        Instruction::I64DivU,
        Instruction::I64Const(1),
        Instruction::I64RemS,
        Instruction::I64Const(1),
        Instruction::I64RemU,
        Instruction::I64Const(1),
        Instruction::I64And,
        Instruction::I64Const(1),
        Instruction::I64Or,
        Instruction::I64Const(1),
        Instruction::I64Xor,
        Instruction::I64Const(1),
        Instruction::I64Shl,
        Instruction::I64Const(1),
        Instruction::I64ShrS,
        Instruction::I64Const(1),
        Instruction::I64ShrU,
        Instruction::I64Const(1),
        Instruction::I64Rotl,
        Instruction::I64Const(1),
        Instruction::I64Rotr,
        Instruction::I32Const(1),
        Instruction::I64ExtendI32S,
        Instruction::Drop,
        Instruction::I32Const(1),
        Instruction::I64ExtendI32U,
        Instruction::Drop,
        Instruction::F32Const(1f32),
        Instruction::I64TruncF32S,
        Instruction::Drop,
        Instruction::F32Const(1f32),
        Instruction::I64TruncF32U,
        Instruction::Drop,
        Instruction::F64Const(1f64),
        Instruction::I64TruncF64S,
        Instruction::Drop,
        Instruction::F64Const(1f64),
        Instruction::I64TruncF64U,
        Instruction::Drop,
        Instruction::F64Const(1f64),
        Instruction::I64ReinterpretF64,
        Instruction::Drop,
        Instruction::I64Extend8S,
        Instruction::I64Extend16S,
        Instruction::I64Extend32S,
        Instruction::Drop,
        Instruction::F32Const(1f32),
        Instruction::I64TruncSatF32S,
        Instruction::Drop,
        Instruction::F32Const(1f32),
        Instruction::I64TruncSatF32U,
        Instruction::Drop,
        Instruction::F64Const(1f64),
        Instruction::I64TruncSatF64S,
        Instruction::Drop,
        Instruction::F64Const(1f64),
        Instruction::I64TruncSatF64U,
        Instruction::End,
    ];

    fn_body.add_instructions(instructions);

    module.add_function(fn_body, None);
    let output = module.compile().unwrap();
    let reference = std::fs::read("testdata/functions/i64.wasm").unwrap();
    assert_eq!(reference, output);
}
